# -*- coding: utf-8 -*-
"""ASD.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ooM1wG1CqSEoNTt1K3HF35s5GDbuUbj2
"""

from google.colab import drive
drive.mount('/content/drive')



import os
print(os.listdir('/content/'))

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator

img_size = (224, 224)
batch_size = 32

train_datagen = ImageDataGenerator(rescale=1./255, validation_split=0.2)

train_gen = train_datagen.flow_from_directory(
    '/content/drive/MyDrive/ASD-COLAB/autism/train',
    target_size=img_size,
    batch_size=batch_size,
    class_mode='binary',
    subset='training'
)

val_gen = train_datagen.flow_from_directory(
    '/content/drive/MyDrive/ASD-COLAB/autism/valid',
    target_size=img_size,
    batch_size=batch_size,
    class_mode='binary',
    subset='validation'
)

import os
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Define directory paths
train_dir = '/content/drive/MyDrive/ASD-COLAB/autism/train'
validation_dir = '/content/drive/MyDrive/ASD-COLAB/autism/valid'

# Create data generators with more data augmentation
train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=40,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest',
    brightness_range=[0.5, 1.5], # Add brightness augmentation
    channel_shift_range=100 # Add channel shift augmentation
)

validation_datagen = ImageDataGenerator(rescale=1./255) # Typically no augmentation on validation data

# Load images from directories
train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=(224, 224),
    batch_size=32,
    class_mode='binary',
    color_mode='rgb',
    shuffle=True
)

validation_generator = validation_datagen.flow_from_directory(
    validation_dir,
    target_size=(224, 224),
    batch_size=32,
    class_mode='binary',
    color_mode='rgb',
    shuffle=False
)

"""## Modify vgg19 for autism detection


Adapt the VGG19 model for the specific task of autism detection. This might involve adding new layers for classification or fine-tuning existing layers.

**Reasoning**:
I need to adapt the VGG19 base model for binary classification by adding new layers on top of it. This involves creating a sequential model, adding the base model, flattening its output, adding dense layers with ReLU activation, potentially a dropout layer, and a final dense layer with sigmoid activation for binary output.freezed the weights of the base model initially for stability.
"""

from tensorflow.keras.applications import VGG19
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten, Dropout
from tensorflow.keras.optimizers import Adam # Import Adam optimizer

base_model = VGG19(weights='imagenet', include_top=False, input_shape=(224,224,3))

# Unfreeze the last few layers of the base model for fine-tuning
# You can adjust the number of layers to unfreeze
for layer in base_model.layers[:]: # Unfreeze all layers initially, we'll set trainable=False for early layers later
    layer.trainable = True


model = Sequential([
    base_model,
    Flatten(),
    Dense(256, activation='relu'),
    Dropout(0.5),
    Dense(1, activation='sigmoid')
])

# Set the early layers of the base model to non-trainable again
# You can adjust how many layers to keep frozen
# A common practice is to unfreeze the last few convolutional blocks
num_frozen_layers = 15 # Example: Keep the first 15 layers frozen (adjust as needed)
for layer in base_model.layers[:num_frozen_layers]:
    layer.trainable = False


# Compile the model with a lower learning rate for fine-tuning
model.compile(optimizer=Adam(learning_rate=1e-5), # Use a small learning rate
              loss='binary_crossentropy',
              metrics=['accuracy'])

model.summary()

history = model.fit(train_gen, validation_data=val_gen, epochs=8)

import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing import image

# Define test directory
test_dir = '/content/drive/MyDrive/ASD-COLAB/autism/test'

# Create a test generator (no augmentation, just rescale)
test_datagen = ImageDataGenerator(rescale=1./255)

test_generator = test_datagen.flow_from_directory(
    test_dir,
    target_size=(224, 224),
    batch_size=1,         # one image at a time for prediction
    class_mode=None,      # no labels, only data
    shuffle=False         # important to keep filenames aligned with predictions
)

# Get predictions
predictions = model.predict(test_generator, verbose=1)

# Convert sigmoid outputs into binary classes (0 or 1)
predicted_classes = (predictions > 0.5).astype("int32")

# Map class indices back to class labels
class_indices = train_generator.class_indices
labels = {v: k for k, v in class_indices.items()}  # reverse mapping

# Display predictions with filenames
for i, fname in enumerate(test_generator.filenames):
    print(f"Image: {fname} --> Prediction: {labels[predicted_classes[i][0]]}")

# OPTIONAL: visualize first few test results
for i in range(5):
    img_path = os.path.join(test_dir, test_generator.filenames[i])
    img = image.load_img(img_path, target_size=(224,224))
    plt.imshow(img)
    plt.axis("off")
    plt.title(f"Predicted: {labels[predicted_classes[i][0]]}")
    plt.show()

# Thank you


 ## Analyze misclassifications
#
#  Images that the model is misclassifying are analysed to  identify
# patterns or characteristics that the model is struggling with by
#comparing the true and predicted labels and then display these images along
# with their true and predicted classes to observe patterns.

"""## Analyze misclassifications

### Subtask:
Examine the images that the model is misclassifying to identify patterns or characteristics that the model is struggling with.

**Reasoning**:
I need to identify the misclassified images by comparing the true and predicted labels and then display these images along with their true and predicted classes to observe patterns.
"""

import matplotlib.pyplot as plt
import os

# Identify misclassified indices
misclassified_indices = np.where(y_pred.flatten() != y_true)[0]

print(f"Found {len(misclassified_indices)} misclassified images.")

# Iterate through misclassified indices and display images
for i in misclassified_indices:
    # Get image path
    img_path = validation_generator.filepaths[i]

    # Get true and predicted labels
    true_label = class_names[y_true[i]]
    predicted_label = class_names[y_pred[i][0]]

    print(f"Image: {os.path.basename(img_path)}")
    print(f"True class: {true_label}")
    print(f"Predicted class: {predicted_label}")

    # Load and display image
    img = image.load_img(img_path)
    plt.imshow(img)
    plt.title(f"True: {true_label}, Predicted: {predicted_label}")
    plt.axis('off')
    plt.show()
    print("-" * 30) # Separator for clarity

